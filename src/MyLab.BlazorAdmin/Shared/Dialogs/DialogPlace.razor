@using MyLab.BlazorAdmin.Services.Dialogs
@using Microsoft.JSInterop
@using Nito.AsyncEx
@implements MyLab.BlazorAdmin.Services.Dialogs.IDialogPlace

@inject IJSRuntime Js
@inject IDialogPlaceRegistrar DialogPlaceRegistrar

@foreach (var d in _dialogs)
{
    <DialogContainer DialogStuff="d"/>
}

@code {

    readonly AsyncManualResetEvent _rendered = new(false);

    readonly List<DialogStuff> _dialogs = new();

    /// <inheritdoc />
    public async Task<IDialog<TDialog>> CreateDialogAsync<TDialog>(DialogDescription description)
    {
        RenderFragment? footerRf = description.Footer?.CreateRenderFragment();

        var dialogId = "mylab-modal-" + Guid.NewGuid().ToString("N");
        var dialogWrapper = new BootstrapModalWrapper(Js, dialogId);
        dialogWrapper.Closed += DialogClosedAsync;

        var dialog = new DialogWithModel<TDialog>(dialogWrapper);

        var dialogStuff = new DialogStuff(dialogId, dialogWrapper, description)
        {
            Footer = footerRf
        };
        
        RenderFragment contentRf = description.Content.CreateRenderFragment(o =>
        {
            if (o != null)
            {
                if (o is TDialog dlgModel)
                {
                    dialogStuff.ObjectModel = dlgModel;
                    dialog.Model = dlgModel;
                }
                else
                {
                    throw new InvalidCastException($"Dialog type mismatch. Expected '{typeof(TDialog).FullName}' but actual '{o.GetType().FullName}'");
                }
            }
        });

        dialogStuff.Content = contentRf;

        _dialogs.Add(dialogStuff);

        _rendered.Reset();

        StateHasChanged();

        await _rendered.WaitAsync();
        await dialogWrapper.InitializeAsync(description.Backdrop);

        return dialog;
    }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        DialogPlaceRegistrar.Register(this);

        base.OnInitialized();
    }

    /// <inheritdoc />
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        _rendered.Set();
    }

    async Task DialogClosedAsync(object sender, EventArgs e)
    {
        var dialogSender = (BootstrapModalWrapper)sender;
        dialogSender.Closed -= DialogClosedAsync;

        var foundDialog = _dialogs.FirstOrDefault(d => d.Id == dialogSender.ElementId);

        if (foundDialog != null)
        {
            await foundDialog.Dialog.DisposeAsync();
            _dialogs.Remove(foundDialog);
            StateHasChanged();
        }
    }
}


